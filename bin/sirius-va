#!/bin/bash

### This script is supposed to be run at lnls82-linux
### It starts the virtual accelerator and addtional experiment scripts

export EPICS_CA_AUTO_ADDR_LIST=NO
export EPICS_CA_ADDR_LIST=10.0.21.255
VIOCS=$FACCODE/va/viocs

function stop_instances {
  local cmd='ps -elf | grep "procServ -n '$1'" | grep -v grep | tr -s " " | cut -d " " -f 4'
  # first try to be gentle
  local pids=`eval $cmd`
  if [ ! -z "$pids" ] ; then
    echo "sending SIGINT to "$1"..."
    for pid in "${pids[@]}"
    do
      kill -s SIGINT $pid
    done
  fi
  # but be rude, if needed
  pids=`eval $cmd`
  if [ ! -z "$pids" ] ; then
    echo "sending SIGKILL to "$1"..."
    for pid in "${pids[@]}"
    do
      kill -s SIGKILL $pid
    done
  fi
}

function start_instance {
  local mod=$1
  local port=$2
  local script=$3
  local args=$4
  echo "starting "$mod" at port "$port"..."
  stop_instances $mod
  chmod a+rx $script 2> /dev/null
  str="procServ -n $mod -i ^D^C $port $script $args"
  procServ -n $mod --pidfile=/dev/null --logfile=/dev/null -i ^D^C $port $script $args
}

function dir_app {
    local mod=$1
    local dir=$VIOCS/$mod/$mod"App"/src/O.linux-x86_64/$mod
    echo $dir
}

function dir_boot {
  local mod=$1
    local dir=$VIOCS/$mod/iocBoot/ioc$mod
    echo $dir
}

function start_module {
    if [ $1 == "vaca" ]; then
      start_instance vaca 38000 /usr/local/bin/sirius-vaca.py VA-
    elif [ $1 == "si_current" ]; then
      cd $(dir_boot si_current); start_instance si_current 38001 $(dir_app si_current) $(dir_boot si_current)"/st.cmd"
    elif [ $1 == "si_lifetime" ]; then
      cd $(dir_boot si_lifetime); start_instance si_lifetime 38002 $(dir_app si_lifetime) $(dir_boot si_lifetime)"/st.cmd"
    elif [ $1 == "si_bpms" ]; then
      cd $(dir_boot si_bpms); start_instance si_bpms 38003 $(dir_app si_bpms) $(dir_boot si_bpms)"/st.cmd"
    elif [ $1 == "si_ps" ]; then
      cd $(dir_boot si_ps); start_instance si_ps 38004 $(dir_app si_ps) $(dir_boot si_ps)"/st.cmd"
    elif [ $1 == "si_tune" ]; then
      cd $(dir_boot si_tune); start_instance si_tune 38005 $(dir_app si_tune) $(dir_boot si_tune)"/st.cmd"
    elif [ $1 == "si_rf" ]; then
      cd $(dir_boot si_rf); start_instance si_rf 38006 $(dir_app si_rf) $(dir_boot si_rf)"/st.cmd"
    elif [ $1 == "bo_current" ]; then
      cd $(dir_boot bo_current); start_instance bo_current 38007 $(dir_app bo_current) $(dir_boot bo_current)"/st.cmd"
    elif [ $1 == "bo_bpms" ]; then
      cd $(dir_boot bo_bpms); start_instance bo_bpms 38008 $(dir_app bo_bpms) $(dir_boot bo_bpms)"/st.cmd"
    elif [ $1 == "bo_ps" ]; then
      cd $(dir_boot bo_ps); start_instance bo_ps 38009 $(dir_app bo_ps) $(dir_boot bo_ps)"/st.cmd"
    elif [ $1 == "bo_rf" ]; then
      cd $(dir_boot bo_rf); start_instance bo_rf 38010 $(dir_app bo_rf) $(dir_boot bo_rf)"/st.cmd"
    elif [ $1 == "tb_bpms" ]; then
      cd $(dir_boot tb_bpms); start_instance tb_bpms 38011 $(dir_app tb_bpms) $(dir_boot tb_bpms)"/st.cmd"
    elif [ $1 == "tb_ps" ]; then
      cd $(dir_boot tb_ps); start_instance tb_ps 38012 $(dir_app tb_ps) $(dir_boot tb_ps)"/st.cmd"
    elif [ $1 == "ts_bpms" ]; then
      cd $(dir_boot ts_bpms); start_instance ts_bpms 38013 $(dir_app ts_bpms) $(dir_boot ts_bpms)"/st.cmd"
    elif [ $1 == "ts_ps" ]; then
      cd $(dir_boot ts_ps); start_instance ts_ps 38014 $(dir_app ts_ps) $(dir_boot ts_ps)"/st.cmd"
#    elif [ $1 == "topup" ]; then
#      start_instance topup 38100 /usr/local/bin/sirius-topup.py
    elif [ $1 == "viocs" ]; then
      start_viocs
    else
      echo $0": module not defined!"
    fi
}

function stop_module {
  if [ $1 == "vaca" ]; then
    stop_instances vaca
  elif [ $1 == "si_current" ]; then
    stop_instances si_current
  elif [ $1 == "si_lifetime" ]; then
    stop_instances si_lifetime
  elif [ $1 == "si_bpms" ]; then
    stop_instances si_bpms
  elif [ $1 == "si_ps" ]; then
    stop_instances si_ps
  elif [ $1 == "si_tune" ]; then
    stop_instances si_tune
  elif [ $1 == "si_rf" ]; then
    stop_instances si_rf
  elif [ $1 == "bo_current" ]; then
    stop_instances bo_current
  elif [ $1 == "bo_bpms" ]; then
    stop_instances bo_bpms
  elif [ $1 == "bo_ps" ]; then
    stop_instances bo_ps
  elif [ $1 == "bo_rf" ]; then
    stop_instances bo_rf
  elif [ $1 == "tb_bpms" ]; then
    stop_instances tb_bpms
  elif [ $1 == "tb_ps" ]; then
    stop_instances tb_ps
  elif [ $1 == "ts_bpms" ]; then
    stop_instances ts_bpms
  elif [ $1 == "ts_ps" ]; then
    stop_instances ts_ps
#  elif [ $1 == "topup" ]; then
#    stop_instances topup
  elif [ $1 == "viocs" ]; then
    stop_viocs
  else
    echo $0": module not defined!"
  fi
}

function start_all {
  start_module vaca
  start_module si_current
  start_module si_lifetime
  start_module si_bpms
  start_module si_ps
  start_module si_tune
  start_module si_rf
  start_module bo_current
  start_module bo_bpms
  start_module bo_ps
  start_module bo_rf
  start_module tb_bpms
  start_module tb_ps
  start_module ts_bpms
  start_module ts_ps
  #start_module topup
}

function start_viocs {
  start_module si_current
  start_module si_lifetime
  start_module si_bpms
  start_module si_ps
  start_module si_tune
  start_module si_rf
  start_module bo_current
  start_module bo_bpms
  start_module bo_ps
  start_module bo_rf
  start_module tb_bpms
  start_module tb_ps
  start_module ts_bpms
  start_module ts_ps

}

function stop_all {
  #stop_instances topup
  stop_instances si_rf
  stop_instances si_tune
  stop_instances si_ps
  stop_instances si_bpms
  stop_instances si_lifetime
  stop_instances si_current
  stop_instances bo_rf
  stop_instances bo_ps
  stop_instances bo_bpms
  stop_instances bo_current
  stop_instances tb_ps
  stop_instances tb_bpms
  stop_instances ts_ps
  stop_instances ts_bpms
  stop_instances vaca
}

function stop_viocs {
  stop_instances si_rf
  stop_instances si_tune
  stop_instances si_ps
  stop_instances si_bpms
  stop_instances si_lifetime
  stop_instances si_current
  stop_instances bo_rf
  stop_instances bo_ps
  stop_instances bo_bpms
  stop_instances bo_current
  stop_instances tb_ps
  stop_instances tb_bpms
  stop_instances ts_ps
  stop_instances ts_bpms
}

function list_modules {
  echo "PID  MODULE TELNET-PORT"
  echo "-----------------------"
  ps -elf | grep procServ | grep -v grep | tr -s " " | cut -d " " -f 4,17,22
}

if [ $# == 1 ]; then
  if [ $1 == "start" ]; then
    start_all
  elif [ $1 == "stop" ]; then
    stop_all
  elif [ $1 == "list" ]; then
    list_modules
  else
    echo $0": invalid argument!"
  fi
elif [ $# == 2 ]; then
  if [ $1 == "start" ]; then
    start_module $2
  elif [ $1 == "stop" ]; then
    stop_module $2
  else
    echo $0": invalid argumnet!"
  fi
else
  echo $0": invalid number of argumnets!"
fi
